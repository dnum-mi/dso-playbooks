---
# tasks file for quay-setup-provisioning

- name: Get Quay Organization
  uri:
    url: "{{ QUAY_API_URI }}/organization/{{ ORGANIZATION_NAME }}-{{ PROJECT_NAME }}"
    method: GET
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ QUAY_ADMIN_TOKEN }}"
    body_format: json
    status_code: [200, 404]
  register: get_quay_org

- name: Create Quay Organization
  uri:
    url: "{{ QUAY_API_URI }}/organization/"
    method: POST
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ QUAY_ADMIN_TOKEN }}"
    body_format: json
    status_code: 201
    body:
      name: "{{ ORGANIZATION_NAME }}-{{ PROJECT_NAME }}"
  register: create_quay_org
  when: get_quay_org.json.name is not defined

- name: Create Quay RO team
  uri:
    url: "{{ QUAY_API_URI }}/organization/{{ ORGANIZATION_NAME }}-{{ PROJECT_NAME }}/team/read"
    method: PUT
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ QUAY_ADMIN_TOKEN }}"
    body_format: json
    status_code: [200,201]
    body:
      name: read
      role: member

- name: Create Quay RO team default permission
  uri:
    url: "{{ QUAY_API_URI }}/organization/{{ ORGANIZATION_NAME }}-{{ PROJECT_NAME }}/prototypes"
    method: POST
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ QUAY_ADMIN_TOKEN }}"
    body_format: json
    status_code: [200,201]
    body:
      delegate:
        is_org_member: true
        is_robot: false
        kind: "team"
        name: "read"
      role: "read"

- name: Sync Quay group read
  uri:
    url: "{{ QUAY_API_URI }}/organization/{{ ORGANIZATION_NAME }}-{{ PROJECT_NAME }}/team/read/syncing"
    method: POST
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ QUAY_ADMIN_TOKEN }}"
    body_format: json
    status_code: [201,200,500]
    body:
      group_dn: "cn={{ ORGANIZATION_NAME }}-{{ PROJECT_NAME }},ou=users"

- name: Get Quay User Robot
  uri:
    url: "{{ QUAY_API_URI }}/organization/{{ ORGANIZATION_NAME }}-{{ PROJECT_NAME }}/robots/{{ QUAY_ROBOT_USERNAME }}"
    method: GET
    status_code: 200
    headers:
      Authorization: "Bearer {{ QUAY_ADMIN_TOKEN }}"
  register: get_quay_robot

- name: Create Quay User Robot
  uri:
    url: "{{ QUAY_API_URI }}/organization/{{ ORGANIZATION_NAME }}-{{ PROJECT_NAME }}/robots/{{ QUAY_ROBOT_USERNAME }}"
    method: PUT
    status_code: 201
    headers:
      Authorization: "Bearer {{ QUAY_ADMIN_TOKEN }}"
  register: create_quay_robot
  when: get_quay_robot.json.name is not defined

- name: Get Quay User Robot
  uri:
    url: "{{ QUAY_API_URI }}/organization/{{ ORGANIZATION_NAME }}-{{ PROJECT_NAME }}/robots/{{ QUAY_ROBOT_USERNAME }}"
    method: GET
    status_code: 200
    headers:
      Authorization: "Bearer {{ QUAY_ADMIN_TOKEN }}"
  register: get_quay_robot
  
- name: Add Robot to team owners
  uri:
    url: "{{ QUAY_API_URI }}/organization/{{ ORGANIZATION_NAME }}-{{ PROJECT_NAME }}/team/owners/members/{{ ORGANIZATION_NAME }}-{{ PROJECT_NAME }}+{{ QUAY_ROBOT_USERNAME }}"
    method: PUT
    status_code: [200, 400]
    headers:
      Authorization: "Bearer {{ QUAY_ADMIN_TOKEN }}"
  register: add_robot_team
  failed_when: add_robot_team.status == 400 and not add_robot_team.json.message is search("is already a member of team owners")

- name: "Set robot_token"
  set_fact:
    robot_token: "{{ get_quay_robot.json.token }}"

- name: "Export robot_token"
  set_fact:
    QUAY_ROBOT_USERNAME: "{{ ORGANIZATION_NAME }}-{{ PROJECT_NAME }}+{{ QUAY_ROBOT_USERNAME }}"
    QUAY_ROBOT_TOKEN: "{{robot_token}}"
    QUAY_DOCKER_SECRET: "{{ (QUAY_ROBOT_USERNAME + ':' + robot_token) | b64encode }}"

- name: Vault QUAY informations
  community.hashi_vault.vault_write:
    url: "{{ VAULT_URL }}"
    path: "{{ VAULT_PATH }}/QUAY"
    data:
      data:
        QUAY_ROBOT_USERNAME: "{{ QUAY_ROBOT_USERNAME }}"
        QUAY_ROBOT_TOKEN: "{{ QUAY_ROBOT_TOKEN }}"
    auth_method: token
    token: "{{ VAULT_TOKEN }}"
